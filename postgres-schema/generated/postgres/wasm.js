
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  companyId: 'companyId',
  clientId: 'clientId',
  vehicleId: 'vehicleId',
  draftEstimate: 'draftEstimate',
  notes: 'notes',
  confirmationEmailTemplateId: 'confirmationEmailTemplateId',
  confirmationEmailTemplateStatus: 'confirmationEmailTemplateStatus',
  reminderEmailTemplateId: 'reminderEmailTemplateId',
  reminderEmailTemplateStatus: 'reminderEmailTemplateStatus',
  times: 'times',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  googleEventId: 'googleEventId',
  timezone: 'timezone'
};

exports.Prisma.AppointmentUserScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PipelineAutomationRuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  conditionType: 'conditionType',
  targetColumnId: 'targetColumnId',
  isPaused: 'isPaused',
  timeDelay: 'timeDelay',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PipelineStageScalarFieldEnum = {
  id: 'id',
  pipelineRuleId: 'pipelineRuleId',
  columnId: 'columnId'
};

exports.Prisma.TimeDelayExecutionScalarFieldEnum = {
  id: 'id',
  pipelineRuleId: 'pipelineRuleId',
  communicationRuleId: 'communicationRuleId',
  leadId: 'leadId',
  estimateId: 'estimateId',
  serviceMaintenanceRuleId: 'serviceMaintenanceRuleId',
  invoiceAutomationRuleId: 'invoiceAutomationRuleId',
  executeAt: 'executeAt',
  status: 'status',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  columnId: 'columnId',
  inventoryAutomationRuleId: 'inventoryAutomationRuleId'
};

exports.Prisma.CommunicationAutomationRuleScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  title: 'title',
  timeDelay: 'timeDelay',
  targetColumnId: 'targetColumnId',
  communicationType: 'communicationType',
  isSendWeekDays: 'isSendWeekDays',
  templateType: 'templateType',
  subject: 'subject',
  emailBody: 'emailBody',
  smsBody: 'smsBody',
  isPaused: 'isPaused',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunicationStageScalarFieldEnum = {
  id: 'id',
  communicationRuleId: 'communicationRuleId',
  columnId: 'columnId'
};

exports.Prisma.MarketingAutomationRuleScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  target: 'target',
  targetCondition: 'targetCondition',
  date: 'date',
  startTime: 'startTime',
  isAppointmentCreated: 'isAppointmentCreated',
  vehicleMinYear: 'vehicleMinYear',
  vehicleMaxYear: 'vehicleMaxYear',
  vehicleBrand: 'vehicleBrand',
  vehicleModel: 'vehicleModel',
  communicationType: 'communicationType',
  emailSubject: 'emailSubject',
  emailBody: 'emailBody',
  smsBody: 'smsBody',
  isPaused: 'isPaused',
  createdBy: 'createdBy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceMaintenanceAutomationRuleScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  title: 'title',
  conditionColumnId: 'conditionColumnId',
  isPaused: 'isPaused',
  timeDelay: 'timeDelay',
  targetColumnId: 'targetColumnId',
  templateType: 'templateType',
  emailSubject: 'emailSubject',
  emailBody: 'emailBody',
  smsBody: 'smsBody',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceMaintenanceStageScalarFieldEnum = {
  id: 'id',
  serviceMaintenanceRuleId: 'serviceMaintenanceRuleId',
  serviceId: 'serviceId',
  columnId: 'columnId'
};

exports.Prisma.InvoiceAutomationRuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  companyId: 'companyId',
  invoiceStatusId: 'invoiceStatusId',
  timeDelay: 'timeDelay',
  isPaused: 'isPaused',
  communicationType: 'communicationType',
  emailBody: 'emailBody',
  smsBody: 'smsBody',
  emailSubject: 'emailSubject',
  columnId: 'columnId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryAutomationRuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  companyId: 'companyId',
  frequency: 'frequency',
  day: 'day',
  condition: 'condition',
  action: 'action',
  isPaused: 'isPaused',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryAutomationTeamMemberScalarFieldEnum = {
  inventoryRuleId: 'inventoryRuleId',
  userId: 'userId'
};

exports.Prisma.AutomationAttachmentScalarFieldEnum = {
  id: 'id',
  fileUrl: 'fileUrl',
  communicationId: 'communicationId',
  marketingId: 'marketingId',
  serviceMaintenanceId: 'serviceMaintenanceId',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  mobile: 'mobile',
  email: 'email',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  isFleet: 'isFleet',
  photo: 'photo',
  fromRequest: 'fromRequest',
  fromRequestedCompanyId: 'fromRequestedCompanyId',
  sourceId: 'sourceId',
  converted: 'converted',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerCompany: 'customerCompany',
  tagId: 'tagId',
  notes: 'notes',
  leadId: 'leadId',
  firstContactTime: 'firstContactTime',
  lastMailgunEmailReadId: 'lastMailgunEmailReadId',
  isStarred: 'isStarred'
};

exports.Prisma.FleetScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  fleetName: 'fleetName',
  contactName: 'contactName',
  preferredPaymentTerm: 'preferredPaymentTerm',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FleetStatementScalarFieldEnum = {
  id: 'id',
  fleetId: 'fleetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientCouponScalarFieldEnum = {
  id: 'id',
  couponId: 'couponId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientConversationTrackScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  emailIsRead: 'emailIsRead',
  smsIsRead: 'smsIsRead',
  emailIsUnReadCount: 'emailIsUnReadCount',
  smsUnReadCount: 'smsUnReadCount',
  emailLastMessage: 'emailLastMessage',
  smsLastMessage: 'smsLastMessage',
  sendAt: 'sendAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  businessId: 'businessId',
  businessType: 'businessType',
  phone: 'phone',
  email: 'email',
  industry: 'industry',
  website: 'website',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  image: 'image',
  businessVisibility: 'businessVisibility',
  phoneVisibility: 'phoneVisibility',
  addressVisibility: 'addressVisibility',
  tax: 'tax',
  serviceFee: 'serviceFee',
  currency: 'currency',
  terms: 'terms',
  policy: 'policy',
  googleEmail: 'googleEmail',
  googleRefreshToken: 'googleRefreshToken',
  googleCalendarToken: 'googleCalendarToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyLatitude: 'companyLatitude',
  companyLongitude: 'companyLongitude',
  zapierToken: 'zapierToken',
  isCRMEnabled: 'isCRMEnabled',
  twilioCredentialsId: 'twilioCredentialsId',
  mailgunCredentialId: 'mailgunCredentialId',
  stripeAccountId: 'stripeAccountId',
  timezone: 'timezone'
};

exports.Prisma.CompanyJoinScalarFieldEnum = {
  id: 'id',
  companyOneId: 'companyOneId',
  companyTwoId: 'companyTwoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  weekStart: 'weekStart',
  dayStart: 'dayStart',
  dayEnd: 'dayEnd',
  weekend1: 'weekend1',
  weekend2: 'weekend2',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  date: 'date',
  month: 'month',
  year: 'year',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  message: 'message',
  type: 'type',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  clientName: 'clientName',
  clientEmail: 'clientEmail',
  clientPhone: 'clientPhone',
  vehicleInfo: 'vehicleInfo',
  vehicleId: 'vehicleId',
  services: 'services',
  source: 'source',
  comments: 'comments',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  columnChangedAt: 'columnChangedAt',
  columnId: 'columnId',
  assignedSalesUserId: 'assignedSalesUserId',
  assignedDate: 'assignedDate',
  isLead: 'isLead',
  isQualified: 'isQualified',
  isEstimateCreated: 'isEstimateCreated',
  serviceId: 'serviceId'
};

exports.Prisma.LeadTagsScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadLinkScalarFieldEnum = {
  id: 'id',
  source: 'source',
  generatedLink: 'generatedLink',
  shortUrl: 'shortUrl',
  QRCode: 'QRCode',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  title: 'title',
  description: 'description',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyEmailTemplateScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  message: 'message',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TwilioCredentialsScalarFieldEnum = {
  id: 'id',
  accountSid: 'accountSid',
  authToken: 'authToken',
  phoneNumber: 'phoneNumber',
  apiKeySid: 'apiKeySid',
  apiKeySecret: 'apiKeySecret',
  twimlAppSid: 'twimlAppSid',
  phoneNumberSid: 'phoneNumberSid',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MailgunCredentialScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  mailAddress: 'mailAddress',
  domain: 'domain',
  apiKey: 'apiKey',
  smtpPassword: 'smtpPassword',
  dnsRecords: 'dnsRecords',
  isVerified: 'isVerified',
  verificationStatus: 'verificationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MailgunEmailScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  text: 'text',
  emailBy: 'emailBy',
  messageId: 'messageId',
  companyId: 'companyId',
  clientId: 'clientId',
  createdAt: 'createdAt'
};

exports.Prisma.MailgunEmailAttachmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  size: 'size',
  mailgunEmailId: 'mailgunEmailId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  textColor: 'textColor',
  bgColor: 'bgColor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.ColumnScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  order: 'order',
  textColor: 'textColor',
  bgColor: 'bgColor',
  companyId: 'companyId'
};

exports.Prisma.InventoryProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  quantity: 'quantity',
  price: 'price',
  unit: 'unit',
  lot: 'lot',
  vendorId: 'vendorId',
  userId: 'userId',
  type: 'type',
  receipt: 'receipt',
  lowInventoryAlert: 'lowInventoryAlert',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryProductTagScalarFieldEnum = {
  inventoryId: 'inventoryId',
  tagId: 'tagId'
};

exports.Prisma.InventoryProductHistoryScalarFieldEnum = {
  id: 'id',
  price: 'price',
  quantity: 'quantity',
  date: 'date',
  notes: 'notes',
  type: 'type',
  productId: 'productId',
  invoiceId: 'invoiceId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isLost: 'isLost',
  companyId: 'companyId'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  companyName: 'companyName',
  notes: 'notes',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryWirehouseProductScalarFieldEnum = {
  id: 'id',
  productName: 'productName',
  category: 'category',
  unit: 'unit'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  serviceId: 'serviceId',
  laborId: 'laborId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serviceDesc: 'serviceDesc'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  canned: 'canned',
  fromRequest: 'fromRequest',
  fromRequestedCompanyId: 'fromRequestedCompanyId',
  categoryId: 'categoryId',
  companyId: 'companyId'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  vendorId: 'vendorId',
  categoryId: 'categoryId',
  notes: 'notes',
  quantity: 'quantity',
  cost: 'cost',
  sell: 'sell',
  discount: 'discount',
  companyId: 'companyId',
  invoiceId: 'invoiceId',
  invoiceItemId: 'invoiceItemId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LaborScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  notes: 'notes',
  hours: 'hours',
  charge: 'charge',
  discount: 'discount',
  companyId: 'companyId',
  cannedLabor: 'cannedLabor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  textColor: 'textColor',
  bgColor: 'bgColor',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.ItemTagScalarFieldEnum = {
  itemId: 'itemId',
  tagId: 'tagId'
};

exports.Prisma.MaterialTagScalarFieldEnum = {
  materialId: 'materialId',
  tagId: 'tagId'
};

exports.Prisma.LaborTagScalarFieldEnum = {
  laborId: 'laborId',
  tagId: 'tagId'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  convertedAt: 'convertedAt',
  deliveredAt: 'deliveredAt',
  completedAt: 'completedAt',
  type: 'type',
  clientId: 'clientId',
  vehicleId: 'vehicleId',
  subtotal: 'subtotal',
  discount: 'discount',
  tax: 'tax',
  serviceFee: 'serviceFee',
  grandTotal: 'grandTotal',
  deposit: 'deposit',
  due: 'due',
  statusId: 'statusId',
  fleetStatementId: 'fleetStatementId',
  internalNotes: 'internalNotes',
  dueDate: 'dueDate',
  terms: 'terms',
  policy: 'policy',
  customerNotes: 'customerNotes',
  customerComments: 'customerComments',
  companyId: 'companyId',
  userId: 'userId',
  assignedToId: 'assignedToId',
  fromRequest: 'fromRequest',
  fromRequestedCompanyId: 'fromRequestedCompanyId',
  requestEstimateId: 'requestEstimateId',
  columnId: 'columnId',
  profit: 'profit',
  authorizedName: 'authorizedName',
  stripePaymentLink: 'stripePaymentLink',
  isWorkOrder: 'isWorkOrder',
  workOrderCreatedAt: 'workOrderCreatedAt',
  serviceIndex: 'serviceIndex',
  totalPayment: 'totalPayment',
  damageNotes: 'damageNotes',
  columnChangedAt: 'columnChangedAt'
};

exports.Prisma.InvoiceTagsScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  tagId: 'tagId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoicePhotoScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  photo: 'photo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestEstimateScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  senderCompanyId: 'senderCompanyId',
  receiverId: 'receiverId',
  receiverCompanyId: 'receiverCompanyId',
  vehicleId: 'vehicleId',
  serviceId: 'serviceId',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TechnicianScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  dateClosed: 'dateClosed',
  due: 'due',
  amount: 'amount',
  priority: 'priority',
  status: 'status',
  note: 'note',
  serviceId: 'serviceId',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  invoiceItemId: 'invoiceItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceRedoScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  serviceId: 'serviceId',
  technicianId: 'technicianId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceInspectionScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  title: 'title',
  driver: 'driver',
  passenger: 'passenger',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  to: 'to',
  message: 'message',
  from: 'from',
  groupId: 'groupId',
  section: 'section',
  requestEstimateId: 'requestEstimateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatTrackScalarFieldEnum = {
  id: 'id',
  lastMessage: 'lastMessage',
  isRead: 'isRead',
  section: 'section',
  senderId: 'senderId',
  receiverId: 'receiverId',
  messageId: 'messageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileType: 'fileType',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  messageId: 'messageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationSettingsV2ScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  userId: 'userId',
  section: 'section',
  notification_type: 'notification_type',
  email_enabled: 'email_enabled',
  push_enabled: 'push_enabled',
  text_enabled: 'text_enabled',
  last_updated: 'last_updated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  type: 'type',
  title: 'title',
  description: 'description',
  isUnRead: 'isUnRead',
  avatarUrl: 'avatarUrl',
  redirectUrl: 'redirectUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  date: 'date',
  notes: 'notes',
  amount: 'amount',
  refundedAmount: 'refundedAmount',
  refundMethod: 'refundMethod',
  refundReason: 'refundReason',
  type: 'type',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  refundCreatedAt: 'refundCreatedAt',
  refundUpdatedAt: 'refundUpdatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  reason: 'reason',
  method: 'method',
  refundDate: 'refundDate',
  notes: 'notes',
  paymentId: 'paymentId',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  processedBy: 'processedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardPaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  creditCard: 'creditCard',
  cardType: 'cardType'
};

exports.Prisma.CheckPaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  checkNumber: 'checkNumber'
};

exports.Prisma.CashPaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  receivedCash: 'receivedCash'
};

exports.Prisma.OtherPaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  paymentMethodId: 'paymentMethodId'
};

exports.Prisma.DepositPaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  depositMethod: 'depositMethod',
  depositNotes: 'depositNotes'
};

exports.Prisma.StripePaymentScalarFieldEnum = {
  id: 'id',
  stripePaymentIntentId: 'stripePaymentIntentId',
  paymentId: 'paymentId',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  type: 'type',
  startDate: 'startDate',
  endDate: 'endDate',
  discount: 'discount',
  discountType: 'discountType',
  status: 'status',
  redemptions: 'redemptions',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  companyId: 'companyId',
  invoiceId: 'invoiceId',
  clientId: 'clientId',
  googleEventId: 'googleEventId',
  leadId: 'leadId'
};

exports.Prisma.TaskUserScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  whatHappened: 'whatHappened',
  whatExpected: 'whatExpected',
  snapshotImage: 'snapshotImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeedbackAttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  userFeedbackId: 'userFeedbackId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  emailVerifiedAt: 'emailVerifiedAt',
  image: 'image',
  password: 'password',
  provider: 'provider',
  timezone: 'timezone',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  companyName: 'companyName',
  commission: 'commission',
  role: 'role',
  employeeType: 'employeeType',
  isSuperAdmin: 'isSuperAdmin',
  joinDate: 'joinDate',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refreshToken: 'refreshToken'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  otp: 'otp',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.OAuthTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresIn: 'expiresIn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionForManagerScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  communicationHubInternal: 'communicationHubInternal',
  communicationHubClients: 'communicationHubClients',
  communicationHubCollaboration: 'communicationHubCollaboration',
  estimatesInvoices: 'estimatesInvoices',
  calendarTask: 'calendarTask',
  payments: 'payments',
  workforceManagement: 'workforceManagement',
  reporting: 'reporting',
  inventoryAll: 'inventoryAll',
  integrations: 'integrations',
  salesPipeline: 'salesPipeline',
  shopPipeline: 'shopPipeline',
  businessSettings: 'businessSettings'
};

exports.Prisma.PermissionForSalesScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  communicationHubInternal: 'communicationHubInternal',
  communicationHubClients: 'communicationHubClients',
  communicationHubCollaboration: 'communicationHubCollaboration',
  estimatesInvoices: 'estimatesInvoices',
  calendarTask: 'calendarTask',
  payments: 'payments',
  salesPipeline: 'salesPipeline',
  workforceManagementViewOnly: 'workforceManagementViewOnly',
  reportingViewOnly: 'reportingViewOnly',
  inventoryAllViewOnly: 'inventoryAllViewOnly'
};

exports.Prisma.PermissionForTechnicianScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  communicationHubInternal: 'communicationHubInternal',
  calendarTask: 'calendarTask',
  shopPipeline: 'shopPipeline',
  workforceManagementViewOnly: 'workforceManagementViewOnly',
  reportingViewOnly: 'reportingViewOnly'
};

exports.Prisma.PermissionForOtherScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  communicationHubInternal: 'communicationHubInternal',
  communicationHubClients: 'communicationHubClients',
  communicationHubCollaboration: 'communicationHubCollaboration',
  estimatesInvoices: 'estimatesInvoices',
  calendarTask: 'calendarTask',
  payments: 'payments',
  workforceManagement: 'workforceManagement',
  reporting: 'reporting',
  inventoryAll: 'inventoryAll',
  integrations: 'integrations',
  salesPipeline: 'salesPipeline',
  shopPipeline: 'shopPipeline',
  businessSettings: 'businessSettings'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  communicationHubInternal: 'communicationHubInternal',
  communicationHubClients: 'communicationHubClients',
  communicationHubCollaboration: 'communicationHubCollaboration',
  estimatesInvoices: 'estimatesInvoices',
  calendarTask: 'calendarTask',
  payments: 'payments',
  workforceManagement: 'workforceManagement',
  reporting: 'reporting',
  inventory: 'inventory',
  integrations: 'integrations',
  salesPipeline: 'salesPipeline',
  shopPipeline: 'shopPipeline',
  businessSettings: 'businessSettings',
  workforceManagementViewOnly: 'workforceManagementViewOnly',
  reportingViewOnly: 'reportingViewOnly',
  inventoryAllViewOnly: 'inventoryAllViewOnly'
};

exports.Prisma.ClockInOutScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  clockIn: 'clockIn',
  clockOut: 'clockOut',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClockBreakScalarFieldEnum = {
  id: 'id',
  clockInOutId: 'clockInOutId',
  breakStart: 'breakStart',
  breakEnd: 'breakEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientSMSScalarFieldEnum = {
  id: 'id',
  message: 'message',
  from: 'from',
  to: 'to',
  sentBy: 'sentBy',
  isRead: 'isRead',
  userId: 'userId',
  companyId: 'companyId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientCallScalarFieldEnum = {
  id: 'id',
  callSid: 'callSid',
  from: 'from',
  to: 'to',
  status: 'status',
  direction: 'direction',
  duration: 'duration',
  recordingUrl: 'recordingUrl',
  recordingSid: 'recordingSid',
  callStartTime: 'callStartTime',
  callEndTime: 'callEndTime',
  sentBy: 'sentBy',
  userId: 'userId',
  companyId: 'companyId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientSmsAttachmentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientSMSId: 'clientSMSId'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  year: 'year',
  make: 'make',
  model: 'model',
  submodel: 'submodel',
  type: 'type',
  transmission: 'transmission',
  engineSize: 'engineSize',
  license: 'license',
  vin: 'vin',
  notes: 'notes',
  other: 'other',
  fromRequest: 'fromRequest',
  fromRequestedCompanyId: 'fromRequestedCompanyId',
  colorId: 'colorId',
  clientId: 'clientId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleColorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehiclePartsScalarFieldEnum = {
  id: 'id',
  partsName: 'partsName',
  technicianId: 'technicianId',
  invoiceId: 'invoiceId',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ConditionType = exports.$Enums.ConditionType = {
  APPOINTMENT_SCHEDULED: 'APPOINTMENT_SCHEDULED',
  ESTIMATE_CREATED: 'ESTIMATE_CREATED',
  TASK_CREATED: 'TASK_CREATED',
  MESSAGE_SENT_CLIENT: 'MESSAGE_SENT_CLIENT',
  MESSAGE_RECEIVED_CLIENT: 'MESSAGE_RECEIVED_CLIENT',
  TIME_DELAY: 'TIME_DELAY'
};

exports.ExecutionStatus = exports.$Enums.ExecutionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  BOTH: 'BOTH'
};

exports.TemplateType = exports.$Enums.TemplateType = {
  SMS: 'SMS',
  EMAIL: 'EMAIL'
};

exports.TargetCondition = exports.$Enums.TargetCondition = {
  ALL_CLIENTS_THIS_MONTH: 'ALL_CLIENTS_THIS_MONTH',
  ALL_CLIENTS_THIS_YEAR: 'ALL_CLIENTS_THIS_YEAR',
  ALL_CLIENTS_FROM_1_MONTH: 'ALL_CLIENTS_FROM_1_MONTH',
  ALL_CLIENTS_FROM_2_MONTHS: 'ALL_CLIENTS_FROM_2_MONTHS',
  ALL_CLIENTS_FROM_3_MONTHS: 'ALL_CLIENTS_FROM_3_MONTHS',
  ALL_CLIENTS_FROM_6_MONTHS: 'ALL_CLIENTS_FROM_6_MONTHS',
  ALL_CLIENTS_FROM_LAST_YEAR: 'ALL_CLIENTS_FROM_LAST_YEAR'
};

exports.InventoryAutomationFrequency = exports.$Enums.InventoryAutomationFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  EVERY_TWO_MONTHS: 'EVERY_TWO_MONTHS'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.InventoryCondition = exports.$Enums.InventoryCondition = {
  LOW_STOCK: 'LOW_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  BOTH: 'BOTH'
};

exports.InventoryNotificationAction = exports.$Enums.InventoryNotificationAction = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  BOTH: 'BOTH'
};

exports.EmailTemplateType = exports.$Enums.EmailTemplateType = {
  Confirmation: 'Confirmation',
  Reminder: 'Reminder'
};

exports.LeaveRequestStatus = exports.$Enums.LeaveRequestStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.MailgunVerificationStatus = exports.$Enums.MailgunVerificationStatus = {
  pending: 'pending',
  verified: 'verified',
  failed: 'failed'
};

exports.EMAIL_BY = exports.$Enums.EMAIL_BY = {
  Client: 'Client',
  Company: 'Company'
};

exports.InventoryProductType = exports.$Enums.InventoryProductType = {
  Supply: 'Supply',
  Product: 'Product'
};

exports.InventoryProductHistoryType = exports.$Enums.InventoryProductHistoryType = {
  Purchase: 'Purchase',
  Sale: 'Sale'
};

exports.TagType = exports.$Enums.TagType = {
  GENERAL: 'GENERAL',
  SALES: 'SALES',
  CLIENT: 'CLIENT',
  INVENTORY: 'INVENTORY'
};

exports.InvoiceType = exports.$Enums.InvoiceType = {
  Invoice: 'Invoice',
  Estimate: 'Estimate'
};

exports.Priority = exports.$Enums.Priority = {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High'
};

exports.MessageSection = exports.$Enums.MessageSection = {
  internal: 'internal',
  collaboration: 'collaboration'
};

exports.NotificationSection = exports.$Enums.NotificationSection = {
  CALENDAR_AND_TASK: 'CALENDAR_AND_TASK',
  LEAD_GENERATED_AND_SALES_PIPELINE: 'LEAD_GENERATED_AND_SALES_PIPELINE',
  ESTIMATE_AND_INVOICE: 'ESTIMATE_AND_INVOICE',
  PAYMENT: 'PAYMENT',
  OPERATION_PIPELINE: 'OPERATION_PIPELINE',
  INVENTORY: 'INVENTORY',
  WORK_FORCE: 'WORK_FORCE',
  COMMUNICATIONS: 'COMMUNICATIONS'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  TASK_FINISHED: 'TASK_FINISHED',
  APPOINTMENT_CREATED: 'APPOINTMENT_CREATED',
  APPOINTMENT_REMINDER: 'APPOINTMENT_REMINDER',
  APPOINTMENT_UPDATED: 'APPOINTMENT_UPDATED',
  TASK_REMINDER: 'TASK_REMINDER',
  LEADS_GENERATED: 'LEADS_GENERATED',
  LEADS_CLOSED: 'LEADS_CLOSED',
  FOLLOW_UP: 'FOLLOW_UP',
  LEADS_ASSIGNED: 'LEADS_ASSIGNED',
  STAGE: 'STAGE',
  ESTIMATE_CREATED: 'ESTIMATE_CREATED',
  INVOICE_CREATED: 'INVOICE_CREATED',
  INVOICE_DELIVERY: 'INVOICE_DELIVERY',
  INVOICE_CONVERTED: 'INVOICE_CONVERTED',
  INVOICE_AUTHORIZED: 'INVOICE_AUTHORIZED',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  PAYMENT_DUE: 'PAYMENT_DUE',
  DEPOSIT: 'DEPOSIT',
  WORK_ORDER_CREATED: 'WORK_ORDER_CREATED',
  WORK_ORDER_COMPLETED: 'WORK_ORDER_COMPLETED',
  DUE_DATE_PROXIMITY: 'DUE_DATE_PROXIMITY',
  INVENTORY_COMPLETELY_OUT: 'INVENTORY_COMPLETELY_OUT',
  INVENTORY_NEWLY_ADDED: 'INVENTORY_NEWLY_ADDED',
  INVENTORY_LOW: 'INVENTORY_LOW',
  LEAVE_REQUEST: 'LEAVE_REQUEST',
  PERFORMANCE_CHANGES: 'PERFORMANCE_CHANGES',
  LATE_ARRIVALS: 'LATE_ARRIVALS',
  EARLY_LEAVE: 'EARLY_LEAVE',
  JOB_COMPLETED: 'JOB_COMPLETED',
  JOB_ASSIGNED: 'JOB_ASSIGNED',
  INTERNAL_MESSAGE_ALERT: 'INTERNAL_MESSAGE_ALERT',
  CLIENT_MESSAGE_ALERT: 'CLIENT_MESSAGE_ALERT',
  CLIENT_CALL_ALERT: 'CLIENT_CALL_ALERT',
  CLIENT_EMAIL_ALERT: 'CLIENT_EMAIL_ALERT',
  COLLABORATION_MESSAGE_ALERT: 'COLLABORATION_MESSAGE_ALERT'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CARD: 'CARD',
  CHECK: 'CHECK',
  CASH: 'CASH',
  OTHER: 'OTHER',
  DEPOSIT: 'DEPOSIT'
};

exports.CardType = exports.$Enums.CardType = {
  MASTERCARD: 'MASTERCARD',
  VISA: 'VISA',
  AMEX: 'AMEX',
  OTHER: 'OTHER'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  Percentage: 'Percentage',
  Fixed: 'Fixed'
};

exports.CouponStatus = exports.$Enums.CouponStatus = {
  Active: 'Active',
  Expired: 'Expired'
};

exports.Provider = exports.$Enums.Provider = {
  google: 'google',
  apple: 'apple',
  email: 'email'
};

exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  employee: 'employee'
};

exports.EmployeeType = exports.$Enums.EmployeeType = {
  Admin: 'Admin',
  Manager: 'Manager',
  Sales: 'Sales',
  Technician: 'Technician',
  Other: 'Other'
};

exports.ClientSMSSentBy = exports.$Enums.ClientSMSSentBy = {
  Client: 'Client',
  Company: 'Company'
};

exports.Prisma.ModelName = {
  Appointment: 'Appointment',
  AppointmentUser: 'AppointmentUser',
  PipelineAutomationRule: 'PipelineAutomationRule',
  PipelineStage: 'PipelineStage',
  TimeDelayExecution: 'TimeDelayExecution',
  CommunicationAutomationRule: 'CommunicationAutomationRule',
  CommunicationStage: 'CommunicationStage',
  MarketingAutomationRule: 'MarketingAutomationRule',
  ServiceMaintenanceAutomationRule: 'ServiceMaintenanceAutomationRule',
  ServiceMaintenanceStage: 'ServiceMaintenanceStage',
  InvoiceAutomationRule: 'InvoiceAutomationRule',
  InventoryAutomationRule: 'InventoryAutomationRule',
  InventoryAutomationTeamMember: 'InventoryAutomationTeamMember',
  AutomationAttachment: 'AutomationAttachment',
  Client: 'Client',
  Fleet: 'Fleet',
  FleetStatement: 'FleetStatement',
  Source: 'Source',
  ClientCoupon: 'ClientCoupon',
  ClientConversationTrack: 'ClientConversationTrack',
  Company: 'Company',
  CompanyJoin: 'CompanyJoin',
  CalendarSettings: 'CalendarSettings',
  Holiday: 'Holiday',
  EmailTemplate: 'EmailTemplate',
  Lead: 'Lead',
  LeadTags: 'LeadTags',
  LeadLink: 'LeadLink',
  LeaveRequest: 'LeaveRequest',
  CompanyEmailTemplate: 'CompanyEmailTemplate',
  TwilioCredentials: 'TwilioCredentials',
  MailgunCredential: 'MailgunCredential',
  MailgunEmail: 'MailgunEmail',
  MailgunEmailAttachment: 'MailgunEmailAttachment',
  Category: 'Category',
  Status: 'Status',
  Column: 'Column',
  InventoryProduct: 'InventoryProduct',
  InventoryProductTag: 'InventoryProductTag',
  InventoryProductHistory: 'InventoryProductHistory',
  Vendor: 'Vendor',
  inventoryWirehouseProduct: 'inventoryWirehouseProduct',
  InvoiceItem: 'InvoiceItem',
  Service: 'Service',
  Material: 'Material',
  Labor: 'Labor',
  Tag: 'Tag',
  ItemTag: 'ItemTag',
  MaterialTag: 'MaterialTag',
  LaborTag: 'LaborTag',
  Invoice: 'Invoice',
  InvoiceTags: 'InvoiceTags',
  InvoicePhoto: 'InvoicePhoto',
  RequestEstimate: 'RequestEstimate',
  Technician: 'Technician',
  InvoiceRedo: 'InvoiceRedo',
  InvoiceInspection: 'InvoiceInspection',
  Message: 'Message',
  ChatTrack: 'ChatTrack',
  Attachment: 'Attachment',
  Group: 'Group',
  NotificationSettingsV2: 'NotificationSettingsV2',
  Notification: 'Notification',
  Payment: 'Payment',
  Refund: 'Refund',
  CardPayment: 'CardPayment',
  CheckPayment: 'CheckPayment',
  CashPayment: 'CashPayment',
  OtherPayment: 'OtherPayment',
  DepositPayment: 'DepositPayment',
  StripePayment: 'StripePayment',
  PaymentMethod: 'PaymentMethod',
  Coupon: 'Coupon',
  Task: 'Task',
  TaskUser: 'TaskUser',
  UserFeedback: 'UserFeedback',
  UserFeedbackAttachment: 'UserFeedbackAttachment',
  User: 'User',
  PasswordResetToken: 'PasswordResetToken',
  OAuthToken: 'OAuthToken',
  PermissionForManager: 'PermissionForManager',
  PermissionForSales: 'PermissionForSales',
  PermissionForTechnician: 'PermissionForTechnician',
  PermissionForOther: 'PermissionForOther',
  Permission: 'Permission',
  ClockInOut: 'ClockInOut',
  ClockBreak: 'ClockBreak',
  ClientSMS: 'ClientSMS',
  ClientCall: 'ClientCall',
  ClientSmsAttachments: 'ClientSmsAttachments',
  Vehicle: 'Vehicle',
  VehicleColor: 'VehicleColor',
  VehicleParts: 'VehicleParts'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
